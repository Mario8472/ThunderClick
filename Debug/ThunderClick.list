
ThunderClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003890  08003890  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003898  08003898  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080038a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000074  08003914  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003914  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d484  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc9  00000000  00000000  0002d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209fb  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b717  00000000  00000000  00050e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3bf8  00000000  00000000  0005c522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012011a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  00120170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003798 	.word	0x08003798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003798 	.word	0x08003798

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Read_Address>:
/*   @brief  Function converts write register address of AS3935 to read register address
 *   @param  AS3935 Write register address
 *   @retval AS3935 Read register address
 * */
static uint8_t Read_Address(uint8_t addr)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t out = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
	out = addr | 0x40;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800058c:	73fb      	strb	r3, [r7, #15]

	return out;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <AS3935_Read>:
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @param  AS3935 Register address
 *   @retval Data from specified AS3935 register
 * */
static uint8_t AS3935_Read(SPI_HandleTypeDef *device, uint8_t reg_addr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	uint8_t read_addr = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
	uint8_t received_data = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73bb      	strb	r3, [r7, #14]

	read_addr = Read_Address(reg_addr);
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffe0 	bl	8000578 <Read_Address>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AS3935_CHIP_SELECT_PORT, AS3935_CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <AS3935_Read+0x5c>)
 80005c2:	f000 ff51 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(device, &read_addr, 1, 20);
 80005c6:	f107 010f 	add.w	r1, r7, #15
 80005ca:	2314      	movs	r3, #20
 80005cc:	2201      	movs	r2, #1
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f001 fc4d 	bl	8001e6e <HAL_SPI_Transmit>
	HAL_SPI_Receive(device, &received_data, 1, 20);
 80005d4:	f107 010e 	add.w	r1, r7, #14
 80005d8:	2314      	movs	r3, #20
 80005da:	2201      	movs	r2, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 fd82 	bl	80020e6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(AS3935_CHIP_SELECT_PORT, AS3935_CHIP_SELECT_PIN, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <AS3935_Read+0x5c>)
 80005e8:	f000 ff3e 	bl	8001468 <HAL_GPIO_WritePin>

	return received_data;
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <AS3935_Write>:
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @param  AS3935 write register address
 *   @param  Command (or data) to write in the specified register
 * */
void AS3935_Write(SPI_HandleTypeDef *device, uint8_t reg_addr, uint8_t command)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
 8000608:	4613      	mov	r3, r2
 800060a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(AS3935_CHIP_SELECT_PORT, AS3935_CHIP_SELECT_PIN, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2120      	movs	r1, #32
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <AS3935_Write+0x44>)
 8000612:	f000 ff29 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(device, &reg_addr, 1, 20);
 8000616:	1cf9      	adds	r1, r7, #3
 8000618:	2314      	movs	r3, #20
 800061a:	2201      	movs	r2, #1
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f001 fc26 	bl	8001e6e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(device, &command, 1, 20);
 8000622:	1cb9      	adds	r1, r7, #2
 8000624:	2314      	movs	r3, #20
 8000626:	2201      	movs	r2, #1
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f001 fc20 	bl	8001e6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(AS3935_CHIP_SELECT_PORT, AS3935_CHIP_SELECT_PIN, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2120      	movs	r1, #32
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <AS3935_Write+0x44>)
 8000634:	f000 ff18 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <Set_WatchDogThreshold>:
/*   @brief  Function sets Watch Dog Threshold
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @param  Watch Dog Thresholds options
 * */
void Set_WatchDogThreshold(SPI_HandleTypeDef *device, wdt_thresh_t factor)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
   uint8_t val;

   val = AS3935_Read(device, REG01);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <Set_WatchDogThreshold+0x44>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffa0 	bl	800059c <AS3935_Read>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
   val &= 0xF0;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	f023 030f 	bic.w	r3, r3, #15
 8000666:	73fb      	strb	r3, [r7, #15]
   val |= factor;
 8000668:	7bfa      	ldrb	r2, [r7, #15]
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	4313      	orrs	r3, r2
 800066e:	73fb      	strb	r3, [r7, #15]
   AS3935_Write(device, REG01, val);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <Set_WatchDogThreshold+0x44>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	7bfa      	ldrb	r2, [r7, #15]
 8000676:	4619      	mov	r1, r3
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ffbf 	bl	80005fc <AS3935_Write>
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000

0800068c <PowerDownMode>:
/*   @brief  Function sets AS3935 operating modes
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @param  Power mode type options
 * */
void PowerDownMode(SPI_HandleTypeDef *device, pwr_mode_t factor)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
   uint8_t rec;

   rec = AS3935_Read(device, REG00);
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <PowerDownMode+0x44>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff7c 	bl	800059c <AS3935_Read>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
   rec &= 0xFE;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
   rec |= factor;
 80006b0:	7bfa      	ldrb	r2, [r7, #15]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	73fb      	strb	r3, [r7, #15]

   AS3935_Write(device, REG00, rec);
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <PowerDownMode+0x44>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	7bfa      	ldrb	r2, [r7, #15]
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff9b 	bl	80005fc <AS3935_Write>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000090 	.word	0x20000090

080006d4 <AS3935_ReadIntStat>:
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @retval Data from AS3935 interrupt register
 *   @note   With this function reason for the interrupt can be determined
 * */
uint8_t AS3935_ReadIntStat(SPI_HandleTypeDef *device)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
   uint8_t rec;

   rec = AS3935_Read(device, REG03);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <AS3935_ReadIntStat+0x2c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff5a 	bl	800059c <AS3935_Read>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
   rec &= 0x0F;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	73fb      	strb	r3, [r7, #15]

   return rec;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000001 	.word	0x20000001

08000704 <Get_Distance>:
/*   @brief  Function returns estimated distance to the head of the storm
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @retval Data from AS3935 REG07 register which contains the estimated distance to the head of the approaching storm
 * */
uint8_t Get_Distance(SPI_HandleTypeDef *device)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
   uint8_t rec;

   rec = AS3935_Read(device, REG07);
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <Get_Distance+0x2c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff42 	bl	800059c <AS3935_Read>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]
   rec &= 0x3F;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000722:	73fb      	strb	r3, [r7, #15]

   return rec;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000002 	.word	0x20000002

08000734 <AS3935_Init>:

/*   @brief  Function where basics AS3935 settings are set
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module
 * */
void AS3935_Init(SPI_HandleTypeDef *device)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

   HAL_GPIO_WritePin(AS3935_CHIP_SELECT_PORT, AS3935_CHIP_SELECT_PIN, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <AS3935_Init+0x2c>)
 8000742:	f000 fe91 	bl	8001468 <HAL_GPIO_WritePin>

   PowerDownMode(device, PDWN_OFF);
 8000746:	2100      	movs	r1, #0
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff9f 	bl	800068c <PowerDownMode>
   //Set_SpikeRejection(device, SREJ05);
   Set_WatchDogThreshold(device, WDT_THRES10);
 800074e:	210a      	movs	r1, #10
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff77 	bl	8000644 <Set_WatchDogThreshold>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <AS3935_To_UART>:
 *   @param  hspi pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI module.
 *   @param  huart Pointer to a UART_HandleTypeDef structure that contains the configuration information for the
 *   	     specified UART module.
 * */
void AS3935_To_UART(SPI_HandleTypeDef *device, UART_HandleTypeDef *port)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b092      	sub	sp, #72	; 0x48
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	uint8_t int_status = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t est_distance = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	char data_to_send[60] = {0};
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2238      	movs	r2, #56	; 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fbd0 	bl	8002f2c <memset>

	int_status = AS3935_ReadIntStat(device);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffa1 	bl	80006d4 <AS3935_ReadIntStat>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/****************************** Check what caused interrupt **********************************/
	/* If interrupt occurred due to the High Noise Level */
	if((int_status & 0x01) == HIGH_NOISE_LEVEL_INTERRUPT)
 8000798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d012      	beq.n	80007ca <AS3935_To_UART+0x66>
	{
		sprintf(data_to_send,"Noise Level To High! Change the noise floor threshold. \r\n");
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4933      	ldr	r1, [pc, #204]	; (8000878 <AS3935_To_UART+0x114>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fbc6 	bl	8002f3c <siprintf>
		HAL_UART_Transmit(port, (uint8_t *)data_to_send, strlen(data_to_send), 50);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd0b 	bl	80001d0 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29a      	uxth	r2, r3
 80007be:	f107 0108 	add.w	r1, r7, #8
 80007c2:	2332      	movs	r3, #50	; 0x32
 80007c4:	6838      	ldr	r0, [r7, #0]
 80007c6:	f002 f8be 	bl	8002946 <HAL_UART_Transmit>
	}
	/* If the disturber triggered the interrupt */
	if((int_status & 0x04) == DISTURBER_INTERRUPT)
 80007ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d012      	beq.n	80007fc <AS3935_To_UART+0x98>
	{
		sprintf(data_to_send, "Disturber detected!!! \r\n");
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4928      	ldr	r1, [pc, #160]	; (800087c <AS3935_To_UART+0x118>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fbad 	bl	8002f3c <siprintf>
		HAL_UART_Transmit(port, (uint8_t *)data_to_send, strlen(data_to_send), 50);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcf2 	bl	80001d0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f107 0108 	add.w	r1, r7, #8
 80007f4:	2332      	movs	r3, #50	; 0x32
 80007f6:	6838      	ldr	r0, [r7, #0]
 80007f8:	f002 f8a5 	bl	8002946 <HAL_UART_Transmit>
	}
	/* If the lightning is detected*/
	if((int_status & 0x08) == LIGHTNING_INTERRUPT)
 80007fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <AS3935_To_UART+0x10c>
	{
		est_distance = Get_Distance(device);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff7b 	bl	8000704 <Get_Distance>
 800080e:	4603      	mov	r3, r0
 8000810:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		if(est_distance == 0x3F)
 8000814:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000818:	2b3f      	cmp	r3, #63	; 0x3f
 800081a:	d113      	bne.n	8000844 <AS3935_To_UART+0xe0>
		{
			sprintf(data_to_send, "The storm is out of range!!! \r\n");
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4917      	ldr	r1, [pc, #92]	; (8000880 <AS3935_To_UART+0x11c>)
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fb8a 	bl	8002f3c <siprintf>
			HAL_UART_Transmit(port, (uint8_t *)data_to_send, strlen(data_to_send), 50);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 0108 	add.w	r1, r7, #8
 800083a:	2332      	movs	r3, #50	; 0x32
 800083c:	6838      	ldr	r0, [r7, #0]
 800083e:	f002 f882 	bl	8002946 <HAL_UART_Transmit>
		{
			sprintf(data_to_send, "Estimated storm range: %d km \r\n", est_distance);
			HAL_UART_Transmit(port, (uint8_t *)data_to_send, strlen(data_to_send), 50);
		}
	}
}
 8000842:	e015      	b.n	8000870 <AS3935_To_UART+0x10c>
		else if(est_distance = 0x01)
 8000844:	2301      	movs	r3, #1
 8000846:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			sprintf(data_to_send, "The storm is overhead!!! \r\n");
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <AS3935_To_UART+0x120>)
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fb73 	bl	8002f3c <siprintf>
			HAL_UART_Transmit(port, (uint8_t *)data_to_send, strlen(data_to_send), 50);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcb8 	bl	80001d0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f107 0108 	add.w	r1, r7, #8
 8000868:	2332      	movs	r3, #50	; 0x32
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f002 f86b 	bl	8002946 <HAL_UART_Transmit>
}
 8000870:	bf00      	nop
 8000872:	3748      	adds	r7, #72	; 0x48
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	080037b0 	.word	0x080037b0
 800087c:	080037ec 	.word	0x080037ec
 8000880:	08003808 	.word	0x08003808
 8000884:	08003828 	.word	0x08003828

08000888 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <MX_GPIO_Init+0xe4>)
 8000914:	f000 fda8 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000918:	2320      	movs	r3, #32
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_GPIO_Init+0xe4>)
 8000930:	f000 fbfe 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000934:	2304      	movs	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_GPIO_Init+0xe8>)
 800094a:	f000 fbf1 	bl	8001130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	2008      	movs	r0, #8
 8000954:	f000 fbb5 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000958:	2008      	movs	r0, #8
 800095a:	f000 fbce 	bl	80010fa <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020c00 	.word	0x40020c00

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fa56 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f820 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f7ff ff82 	bl	8000888 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000984:	f000 f880 	bl	8000a88 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000988:	f000 f9b2 	bl	8000cf0 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  // Initialize AS3935
  AS3935_Init(&hspi3);
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <main+0x40>)
 800098e:	f7ff fed1 	bl	8000734 <AS3935_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000992:	b672      	cpsid	i
}
 8000994:	bf00      	nop
	   so that the global variable won't hold corrupted data. */
	__disable_irq();

	/* We are checking for an external interrupt by pooling.
	   If an external interrupt is detected, read detected events and send info to PC. */
	if(g_event == 1)
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <main+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b01      	cmp	r3, #1
 800099e:	d106      	bne.n	80009ae <main+0x3a>
	{
		/* Read Detected Events and send info to PC */
		AS3935_To_UART(&hspi3, &huart2);
 80009a0:	4906      	ldr	r1, [pc, #24]	; (80009bc <main+0x48>)
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <main+0x40>)
 80009a4:	f7ff fede 	bl	8000764 <AS3935_To_UART>

		// Reset global variable
		g_event = 0;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <main+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009ae:	b662      	cpsie	i
}
 80009b0:	bf00      	nop
	__disable_irq();
 80009b2:	e7ee      	b.n	8000992 <main+0x1e>
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	20000091 	.word	0x20000091
 80009bc:	200000f8 	.word	0x200000f8

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 faac 	bl	8002f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xb4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <SystemClock_Config+0xb4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <SystemClock_Config+0xb4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <SystemClock_Config+0xb8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <SystemClock_Config+0xb8>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <SystemClock_Config+0xb8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fd4b 	bl	80014cc <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a3c:	f000 f81e 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 ffae 	bl	80019bc <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a66:	f000 f809 	bl	8000a7c <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	; 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_SPI3_Init+0x64>)
 8000a8e:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <MX_SPI3_Init+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_SPI3_Init+0x64>)
 8000a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_SPI3_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_SPI3_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_SPI3_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_SPI3_Init+0x64>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_SPI3_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_SPI3_Init+0x64>)
 8000ada:	f001 f93f 	bl	8001d5c <HAL_SPI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000ae4:	f7ff ffca 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000a0 	.word	0x200000a0
 8000af0:	40003c00 	.word	0x40003c00

08000af4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b4e:	2338      	movs	r3, #56	; 0x38
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_SPI_MspInit+0x8c>)
 8000b6a:	f000 fae1 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40003c00 	.word	0x40003c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f954 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f000 fc35 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_EXTI_Callback>:
 * Since we want the program to stay in the interrupt routine as short as possible, here we only set a
 * global variable that will help us to detect an external interrupt in the main function.
 *
 *  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d102      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0x16>
	{
		g_event = 1;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x24>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
	}
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000091 	.word	0x20000091

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f002 f922 	bl	8002ed8 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20020000 	.word	0x20020000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	20000094 	.word	0x20000094
 8000cc8:	20000150 	.word	0x20000150

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_USART2_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART2_UART_Init+0x4c>)
 8000d28:	f001 fdc0 	bl	80028ac <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f7ff fea3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000f8 	.word	0x200000f8
 8000d40:	40004400 	.word	0x40004400

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dba:	f000 f9b9 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df0:	4c0b      	ldr	r4, [pc, #44]	; (8000e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ff65 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f002 f86f 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fdb5 	bl	8000974 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e18:	080038a0 	.word	0x080038a0
  ldr r2, =_sbss
 8000e1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e20:	20000150 	.word	0x20000150

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f92b 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fe92 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f943 	bl	8001116 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f90b 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000008 	.word	0x20000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	2000013c 	.word	0x2000013c

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000013c 	.word	0x2000013c

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e16b      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 815a 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80b4 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae90 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fbbc 	bl	8000c38 <HAL_GPIO_EXTI_Callback>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e264      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b9d      	ldr	r3, [pc, #628]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b99      	ldr	r3, [pc, #612]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e23f      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a90      	ldr	r2, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b84      	ldr	r3, [pc, #528]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcb6 	bl	8000ef4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcb2 	bl	8000ef4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e204      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fca2 	bl	8000ef4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fc9e 	bl	8000ef4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f0      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c4      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4952      	ldr	r1, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fc57 	bl	8000ef4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc53 	bl	8000ef4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a5      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4940      	ldr	r1, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc36 	bl	8000ef4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc32 	bl	8000ef4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e184      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc16 	bl	8000ef4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc12 	bl	8000ef4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e164      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e015      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbff 	bl	8000ef4 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fbfb 	bl	8000ef4 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e14d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a0 	beq.w	8001866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d121      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fbc1 	bl	8000ef4 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e011      	b.n	800179a <HAL_RCC_OscConfig+0x2ce>
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
 8001784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fbb4 	bl	8000ef4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e106      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x4e4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80017ae:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a80      	ldr	r2, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e01c      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x312>
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a7a      	ldr	r2, [pc, #488]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	4a74      	ldr	r2, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d015      	beq.n	800182a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb79 	bl	8000ef4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fb75 	bl	8000ef4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0c5      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ee      	beq.n	8001806 <HAL_RCC_OscConfig+0x33a>
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb63 	bl	8000ef4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fb5f 	bl	8000ef4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0af      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 809b 	beq.w	80019a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d05c      	beq.n	8001936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d141      	bne.n	8001908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fb33 	bl	8000ef4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fb2f 	bl	8000ef4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e081      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb08 	bl	8000ef4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb04 	bl	8000ef4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e056      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x41c>
 8001906:	e04e      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff faf1 	bl	8000ef4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff faed 	bl	8000ef4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03f      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x44a>
 8001934:	e037      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e032      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_RCC_OscConfig+0x4e8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d028      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d121      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d11a      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001978:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197a:	4293      	cmp	r3, r2
 800197c:	d111      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40007000 	.word	0x40007000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	42470060 	.word	0x42470060

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fa22 	bl	8000ef4 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff fa1e 	bl	8000ef4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f982 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08003844 	.word	0x08003844
 8001b80:	20000004 	.word	0x20000004
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6079      	str	r1, [r7, #4]
 8001b92:	2100      	movs	r1, #0
 8001b94:	60f9      	str	r1, [r7, #12]
 8001b96:	2100      	movs	r1, #0
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9e:	4952      	ldr	r1, [pc, #328]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba0:	6889      	ldr	r1, [r1, #8]
 8001ba2:	f001 010c 	and.w	r1, r1, #12
 8001ba6:	2908      	cmp	r1, #8
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001baa:	2908      	cmp	r1, #8
 8001bac:	f200 8094 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x150>
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x32>
 8001bb4:	2904      	cmp	r1, #4
 8001bb6:	d003      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8001bb8:	e08e      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_GetSysClockFreq+0x164>)
 8001bbc:	60bb      	str	r3, [r7, #8]
       break;
 8001bbe:	e08e      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bc2:	60bb      	str	r3, [r7, #8]
      break;
 8001bc4:	e08b      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc6:	4948      	ldr	r1, [pc, #288]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bc8:	6849      	ldr	r1, [r1, #4]
 8001bca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001bce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd0:	4945      	ldr	r1, [pc, #276]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bd2:	6849      	ldr	r1, [r1, #4]
 8001bd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d024      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	4942      	ldr	r1, [pc, #264]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bde:	6849      	ldr	r1, [r1, #4]
 8001be0:	0989      	lsrs	r1, r1, #6
 8001be2:	4608      	mov	r0, r1
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001bec:	f04f 0500 	mov.w	r5, #0
 8001bf0:	ea00 0204 	and.w	r2, r0, r4
 8001bf4:	ea01 0305 	and.w	r3, r1, r5
 8001bf8:	493d      	ldr	r1, [pc, #244]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bfa:	fb01 f003 	mul.w	r0, r1, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	fb01 f102 	mul.w	r1, r1, r2
 8001c04:	1844      	adds	r4, r0, r1
 8001c06:	493a      	ldr	r1, [pc, #232]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c08:	fba2 0101 	umull	r0, r1, r2, r1
 8001c0c:	1863      	adds	r3, r4, r1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe fb32 	bl	8000280 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e04a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	ea02 0400 	and.w	r4, r2, r0
 8001c3e:	ea03 0501 	and.w	r5, r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	014b      	lsls	r3, r1, #5
 8001c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c54:	0142      	lsls	r2, r0, #5
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	1b00      	subs	r0, r0, r4
 8001c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6e:	0182      	lsls	r2, r0, #6
 8001c70:	1a12      	subs	r2, r2, r0
 8001c72:	eb63 0301 	sbc.w	r3, r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	00d9      	lsls	r1, r3, #3
 8001c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c84:	00d0      	lsls	r0, r2, #3
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	1912      	adds	r2, r2, r4
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0299      	lsls	r1, r3, #10
 8001c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c9e:	0290      	lsls	r0, r2, #10
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f7fe fae6 	bl	8000280 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_GetSysClockFreq+0x164>)
 8001cda:	60bb      	str	r3, [r7, #8]
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	68bb      	ldr	r3, [r7, #8]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	017d7840 	.word	0x017d7840

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a9b      	lsrs	r3, r3, #10
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08003854 	.word	0x08003854

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff ffdc 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0b5b      	lsrs	r3, r3, #13
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08003854 	.word	0x08003854

08001d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07b      	b.n	8001e66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d7e:	d009      	beq.n	8001d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
 8001d86:	e005      	b.n	8001d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fea0 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0104 	and.w	r1, r3, #4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f003 0210 	and.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_SPI_Transmit+0x22>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e126      	b.n	80020de <HAL_SPI_Transmit+0x270>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e98:	f7ff f82c 	bl	8000ef4 <HAL_GetTick>
 8001e9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb2:	e10b      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Transmit+0x52>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec4:	e102      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0c:	d10f      	bne.n	8001f2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d007      	beq.n	8001f4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f54:	d14b      	bne.n	8001fee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Transmit+0xf6>
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d13e      	bne.n	8001fe2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	1c9a      	adds	r2, r3, #2
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f88:	e02b      	b.n	8001fe2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d112      	bne.n	8001fbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	1c9a      	adds	r2, r3, #2
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fbc:	e011      	b.n	8001fe2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fbe:	f7fe ff99 	bl	8000ef4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d803      	bhi.n	8001fd6 <HAL_SPI_Transmit+0x168>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d102      	bne.n	8001fdc <HAL_SPI_Transmit+0x16e>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fe0:	e074      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ce      	bne.n	8001f8a <HAL_SPI_Transmit+0x11c>
 8001fec:	e04c      	b.n	8002088 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0x18e>
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d140      	bne.n	800207e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002022:	e02c      	b.n	800207e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d113      	bne.n	800205a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36
 8002058:	e011      	b.n	800207e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe ff4b 	bl	8000ef4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d803      	bhi.n	8002072 <HAL_SPI_Transmit+0x204>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d102      	bne.n	8002078 <HAL_SPI_Transmit+0x20a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800207c:	e026      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1cd      	bne.n	8002024 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fbcb 	bl	8002828 <SPI_EndRxTxTransaction>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
 80020c8:	e000      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80020ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b088      	sub	sp, #32
 80020ea:	af02      	add	r7, sp, #8
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002102:	d112      	bne.n	800212a <HAL_SPI_Receive+0x44>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10e      	bne.n	800212a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2204      	movs	r2, #4
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f8f1 	bl	8002308 <HAL_SPI_TransmitReceive>
 8002126:	4603      	mov	r3, r0
 8002128:	e0ea      	b.n	8002300 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_SPI_Receive+0x52>
 8002134:	2302      	movs	r3, #2
 8002136:	e0e3      	b.n	8002300 <HAL_SPI_Receive+0x21a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002140:	f7fe fed8 	bl	8000ef4 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d002      	beq.n	8002158 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002152:	2302      	movs	r3, #2
 8002154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002156:	e0ca      	b.n	80022ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_SPI_Receive+0x7e>
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002168:	e0c1      	b.n	80022ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2204      	movs	r2, #4
 800216e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	88fa      	ldrh	r2, [r7, #6]
 8002188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b0:	d10f      	bne.n	80021d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d007      	beq.n	80021f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d162      	bne.n	80022be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021f8:	e02e      	b.n	8002258 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d115      	bne.n	8002234 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f103 020c 	add.w	r2, r3, #12
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002232:	e011      	b.n	8002258 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002234:	f7fe fe5e 	bl	8000ef4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d803      	bhi.n	800224c <HAL_SPI_Receive+0x166>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Receive+0x16c>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002256:	e04a      	b.n	80022ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1cb      	bne.n	80021fa <HAL_SPI_Receive+0x114>
 8002262:	e031      	b.n	80022c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d113      	bne.n	800229a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	b292      	uxth	r2, r2
 800227e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002298:	e011      	b.n	80022be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800229a:	f7fe fe2b 	bl	8000ef4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d803      	bhi.n	80022b2 <HAL_SPI_Receive+0x1cc>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d102      	bne.n	80022b8 <HAL_SPI_Receive+0x1d2>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022bc:	e017      	b.n	80022ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1cd      	bne.n	8002264 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fa45 	bl	800275c <SPI_EndRxTransaction>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
 80022ea:	e000      	b.n	80022ee <HAL_SPI_Receive+0x208>
  }

error :
 80022ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_SPI_TransmitReceive+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e18a      	b.n	8002644 <HAL_SPI_TransmitReceive+0x33c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002336:	f7fe fddd 	bl	8000ef4 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002354:	2b01      	cmp	r3, #1
 8002356:	d00f      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x70>
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235e:	d107      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x68>
 8002368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236c:	2b04      	cmp	r3, #4
 800236e:	d003      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002376:	e15b      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_SPI_TransmitReceive+0x82>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_TransmitReceive+0x82>
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002390:	e14e      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b04      	cmp	r3, #4
 800239c:	d003      	beq.n	80023a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d007      	beq.n	80023fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002402:	d178      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x10a>
 800240c:	8b7b      	ldrh	r3, [r7, #26]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d166      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002436:	e053      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11b      	bne.n	800247e <HAL_SPI_TransmitReceive+0x176>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_SPI_TransmitReceive+0x176>
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d113      	bne.n	800247e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1c9a      	adds	r2, r3, #2
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d119      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x1b8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d014      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	b292      	uxth	r2, r2
 80024a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	1c9a      	adds	r2, r3, #2
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024c0:	f7fe fd18 	bl	8000ef4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d807      	bhi.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d003      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024de:	e0a7      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1a6      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x130>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1a1      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x130>
 80024f4:	e07c      	b.n	80025f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x1fc>
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d16b      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252a:	e057      	b.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11c      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d114      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d119      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b2:	2301      	movs	r3, #1
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b6:	f7fe fc9d 	bl	8000ef4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d803      	bhi.n	80025ce <HAL_SPI_TransmitReceive+0x2c6>
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x2cc>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025da:	e029      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1a2      	bne.n	800252c <HAL_SPI_TransmitReceive+0x224>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d19d      	bne.n	800252c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f917 	bl	8002828 <SPI_EndRxTxTransaction>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800260c:	e010      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	e000      	b.n	8002630 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800262e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002644:	4618      	mov	r0, r3
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800265c:	f7fe fc4a 	bl	8000ef4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800266c:	f7fe fc42 	bl	8000ef4 <HAL_GetTick>
 8002670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	0d1b      	lsrs	r3, r3, #20
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002682:	e054      	b.n	800272e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d050      	beq.n	800272e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800268c:	f7fe fc32 	bl	8000ef4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d902      	bls.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13d      	bne.n	800271e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d111      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	d004      	beq.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d107      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e8:	d10f      	bne.n	800270a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e017      	b.n	800274e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3b01      	subs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	429a      	cmp	r2, r3
 800274a:	d19b      	bne.n	8002684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000004 	.word	0x20000004

0800275c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002770:	d111      	bne.n	8002796 <SPI_EndRxTransaction+0x3a>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277a:	d004      	beq.n	8002786 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d107      	bne.n	8002796 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279e:	d12a      	bne.n	80027f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a8:	d012      	beq.n	80027d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff ff49 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02d      	beq.n	800281c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e026      	b.n	800281e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2101      	movs	r1, #1
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff ff36 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01a      	beq.n	800281c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e013      	b.n	800281e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2101      	movs	r1, #1
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff23 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e000      	b.n	800281e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <SPI_EndRxTxTransaction+0x7c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <SPI_EndRxTxTransaction+0x80>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0d5b      	lsrs	r3, r3, #21
 8002840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d112      	bne.n	800287a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fef4 	bl	800264c <SPI_WaitFlagStateUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3b01      	subs	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d0f2      	beq.n	800287a <SPI_EndRxTxTransaction+0x52>
 8002894:	e000      	b.n	8002898 <SPI_EndRxTxTransaction+0x70>
        break;
 8002896:	bf00      	nop
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000004 	.word	0x20000004
 80028a8:	165e9f81 	.word	0x165e9f81

080028ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e03f      	b.n	800293e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe fa36 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f929 	bl	8002b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	; 0x28
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d17c      	bne.n	8002a60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_UART_Transmit+0x2c>
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e075      	b.n	8002a62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_UART_Transmit+0x3e>
 8002980:	2302      	movs	r3, #2
 8002982:	e06e      	b.n	8002a62 <HAL_UART_Transmit+0x11c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299a:	f7fe faab 	bl	8000ef4 <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Transmit+0x82>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029d8:	e02a      	b.n	8002a30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f840 	bl	8002a6a <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e036      	b.n	8002a62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e007      	b.n	8002a22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1cf      	bne.n	80029da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2140      	movs	r1, #64	; 0x40
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f810 	bl	8002a6a <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e006      	b.n	8002a62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b090      	sub	sp, #64	; 0x40
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7a:	e050      	b.n	8002b1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d04c      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a8a:	f7fe fa33 	bl	8000ef4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d241      	bcs.n	8002b1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aba:	637a      	str	r2, [r7, #52]	; 0x34
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aee:	623a      	str	r2, [r7, #32]
 8002af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	69f9      	ldr	r1, [r7, #28]
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e00f      	b.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d09f      	beq.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3740      	adds	r7, #64	; 0x40
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	b09f      	sub	sp, #124	; 0x7c
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	ea40 0301 	orr.w	r3, r0, r1
 8002b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b8c:	f021 010c 	bic.w	r1, r1, #12
 8002b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b96:	430b      	orrs	r3, r1
 8002b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	6999      	ldr	r1, [r3, #24]
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	ea40 0301 	orr.w	r3, r0, r1
 8002bb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4bc5      	ldr	r3, [pc, #788]	; (8002ecc <UART_SetConfig+0x384>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d004      	beq.n	8002bc6 <UART_SetConfig+0x7e>
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4bc3      	ldr	r3, [pc, #780]	; (8002ed0 <UART_SetConfig+0x388>)
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d103      	bne.n	8002bce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc6:	f7ff f8b5 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 8002bca:	6778      	str	r0, [r7, #116]	; 0x74
 8002bcc:	e002      	b.n	8002bd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff f89d 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002bd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	f040 80b6 	bne.w	8002d4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	461c      	mov	r4, r3
 8002be4:	f04f 0500 	mov.w	r5, #0
 8002be8:	4622      	mov	r2, r4
 8002bea:	462b      	mov	r3, r5
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	6439      	str	r1, [r7, #64]	; 0x40
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf8:	1912      	adds	r2, r2, r4
 8002bfa:	eb45 0303 	adc.w	r3, r5, r3
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	00d9      	lsls	r1, r3, #3
 8002c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c0c:	00d0      	lsls	r0, r2, #3
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	1911      	adds	r1, r2, r4
 8002c14:	6639      	str	r1, [r7, #96]	; 0x60
 8002c16:	416b      	adcs	r3, r5
 8002c18:	667b      	str	r3, [r7, #100]	; 0x64
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c34:	f7fd fb24 	bl	8000280 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4ba5      	ldr	r3, [pc, #660]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011e      	lsls	r6, r3, #4
 8002c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c48:	461c      	mov	r4, r3
 8002c4a:	f04f 0500 	mov.w	r5, #0
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	1891      	adds	r1, r2, r2
 8002c54:	6339      	str	r1, [r7, #48]	; 0x30
 8002c56:	415b      	adcs	r3, r3
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c5e:	1912      	adds	r2, r2, r4
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	00d9      	lsls	r1, r3, #3
 8002c6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c72:	00d0      	lsls	r0, r2, #3
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	1911      	adds	r1, r2, r4
 8002c7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c7c:	416b      	adcs	r3, r5
 8002c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	1891      	adds	r1, r2, r2
 8002c8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c8e:	415b      	adcs	r3, r3
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c9a:	f7fd faf1 	bl	8000280 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc4:	441e      	add	r6, r3
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	1894      	adds	r4, r2, r2
 8002cd4:	623c      	str	r4, [r7, #32]
 8002cd6:	415b      	adcs	r3, r3
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cde:	1812      	adds	r2, r2, r0
 8002ce0:	eb41 0303 	adc.w	r3, r1, r3
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	f04f 0500 	mov.w	r5, #0
 8002cec:	00dd      	lsls	r5, r3, #3
 8002cee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cf2:	00d4      	lsls	r4, r2, #3
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	1814      	adds	r4, r2, r0
 8002cfa:	653c      	str	r4, [r7, #80]	; 0x50
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	61b9      	str	r1, [r7, #24]
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d1a:	f7fd fab1 	bl	8000280 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4b6c      	ldr	r3, [pc, #432]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002d24:	fba3 1302 	umull	r1, r3, r3, r2
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	2164      	movs	r1, #100	; 0x64
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3332      	adds	r3, #50	; 0x32
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	f003 0207 	and.w	r2, r3, #7
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4432      	add	r2, r6
 8002d48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d4a:	e0b9      	b.n	8002ec0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4e:	461c      	mov	r4, r3
 8002d50:	f04f 0500 	mov.w	r5, #0
 8002d54:	4622      	mov	r2, r4
 8002d56:	462b      	mov	r3, r5
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d64:	1912      	adds	r2, r2, r4
 8002d66:	eb45 0303 	adc.w	r3, r5, r3
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	00d9      	lsls	r1, r3, #3
 8002d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d78:	00d0      	lsls	r0, r2, #3
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	eb12 0804 	adds.w	r8, r2, r4
 8002d82:	eb43 0905 	adc.w	r9, r3, r5
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	008b      	lsls	r3, r1, #2
 8002d9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d9e:	0082      	lsls	r2, r0, #2
 8002da0:	4640      	mov	r0, r8
 8002da2:	4649      	mov	r1, r9
 8002da4:	f7fd fa6c 	bl	8000280 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011e      	lsls	r6, r3, #4
 8002db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db8:	4618      	mov	r0, r3
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	1894      	adds	r4, r2, r2
 8002dc4:	60bc      	str	r4, [r7, #8]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dce:	1812      	adds	r2, r2, r0
 8002dd0:	eb41 0303 	adc.w	r3, r1, r3
 8002dd4:	f04f 0400 	mov.w	r4, #0
 8002dd8:	f04f 0500 	mov.w	r5, #0
 8002ddc:	00dd      	lsls	r5, r3, #3
 8002dde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002de2:	00d4      	lsls	r4, r2, #3
 8002de4:	4622      	mov	r2, r4
 8002de6:	462b      	mov	r3, r5
 8002de8:	1814      	adds	r4, r2, r0
 8002dea:	64bc      	str	r4, [r7, #72]	; 0x48
 8002dec:	414b      	adcs	r3, r1
 8002dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	008b      	lsls	r3, r1, #2
 8002e04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e08:	0082      	lsls	r2, r0, #2
 8002e0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e0e:	f7fd fa37 	bl	8000280 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002e18:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2164      	movs	r1, #100	; 0x64
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	3332      	adds	r3, #50	; 0x32
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e36:	441e      	add	r6, r3
 8002e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	1894      	adds	r4, r2, r2
 8002e46:	603c      	str	r4, [r7, #0]
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e50:	1812      	adds	r2, r2, r0
 8002e52:	eb41 0303 	adc.w	r3, r1, r3
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	f04f 0500 	mov.w	r5, #0
 8002e5e:	00dd      	lsls	r5, r3, #3
 8002e60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e64:	00d4      	lsls	r4, r2, #3
 8002e66:	4622      	mov	r2, r4
 8002e68:	462b      	mov	r3, r5
 8002e6a:	eb12 0a00 	adds.w	sl, r2, r0
 8002e6e:	eb43 0b01 	adc.w	fp, r3, r1
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e8a:	0082      	lsls	r2, r0, #2
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	4659      	mov	r1, fp
 8002e90:	f7fd f9f6 	bl	8000280 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <UART_SetConfig+0x38c>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4432      	add	r2, r6
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	377c      	adds	r7, #124	; 0x7c
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	40011400 	.word	0x40011400
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <__errno>:
 8002ed8:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <__errno+0x8>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000010 	.word	0x20000010

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4d0d      	ldr	r5, [pc, #52]	; (8002f1c <__libc_init_array+0x38>)
 8002ee8:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	2600      	movs	r6, #0
 8002ef0:	42a6      	cmp	r6, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	4d0b      	ldr	r5, [pc, #44]	; (8002f24 <__libc_init_array+0x40>)
 8002ef6:	4c0c      	ldr	r4, [pc, #48]	; (8002f28 <__libc_init_array+0x44>)
 8002ef8:	f000 fc4e 	bl	8003798 <_init>
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	2600      	movs	r6, #0
 8002f02:	42a6      	cmp	r6, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0c:	4798      	blx	r3
 8002f0e:	3601      	adds	r6, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f16:	4798      	blx	r3
 8002f18:	3601      	adds	r6, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	08003898 	.word	0x08003898
 8002f20:	08003898 	.word	0x08003898
 8002f24:	08003898 	.word	0x08003898
 8002f28:	0800389c 	.word	0x0800389c

08002f2c <memset>:
 8002f2c:	4402      	add	r2, r0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <memset+0xa>
 8002f34:	4770      	bx	lr
 8002f36:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3a:	e7f9      	b.n	8002f30 <memset+0x4>

08002f3c <siprintf>:
 8002f3c:	b40e      	push	{r1, r2, r3}
 8002f3e:	b500      	push	{lr}
 8002f40:	b09c      	sub	sp, #112	; 0x70
 8002f42:	ab1d      	add	r3, sp, #116	; 0x74
 8002f44:	9002      	str	r0, [sp, #8]
 8002f46:	9006      	str	r0, [sp, #24]
 8002f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <siprintf+0x38>)
 8002f4e:	9107      	str	r1, [sp, #28]
 8002f50:	9104      	str	r1, [sp, #16]
 8002f52:	4909      	ldr	r1, [pc, #36]	; (8002f78 <siprintf+0x3c>)
 8002f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f58:	9105      	str	r1, [sp, #20]
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	a902      	add	r1, sp, #8
 8002f60:	f000 f868 	bl	8003034 <_svfiprintf_r>
 8002f64:	9b02      	ldr	r3, [sp, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	b01c      	add	sp, #112	; 0x70
 8002f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f70:	b003      	add	sp, #12
 8002f72:	4770      	bx	lr
 8002f74:	20000010 	.word	0x20000010
 8002f78:	ffff0208 	.word	0xffff0208

08002f7c <__ssputs_r>:
 8002f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	688e      	ldr	r6, [r1, #8]
 8002f82:	429e      	cmp	r6, r3
 8002f84:	4682      	mov	sl, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	4690      	mov	r8, r2
 8002f8a:	461f      	mov	r7, r3
 8002f8c:	d838      	bhi.n	8003000 <__ssputs_r+0x84>
 8002f8e:	898a      	ldrh	r2, [r1, #12]
 8002f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f94:	d032      	beq.n	8002ffc <__ssputs_r+0x80>
 8002f96:	6825      	ldr	r5, [r4, #0]
 8002f98:	6909      	ldr	r1, [r1, #16]
 8002f9a:	eba5 0901 	sub.w	r9, r5, r1
 8002f9e:	6965      	ldr	r5, [r4, #20]
 8002fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fa8:	3301      	adds	r3, #1
 8002faa:	444b      	add	r3, r9
 8002fac:	106d      	asrs	r5, r5, #1
 8002fae:	429d      	cmp	r5, r3
 8002fb0:	bf38      	it	cc
 8002fb2:	461d      	movcc	r5, r3
 8002fb4:	0553      	lsls	r3, r2, #21
 8002fb6:	d531      	bpl.n	800301c <__ssputs_r+0xa0>
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f000 fb47 	bl	800364c <_malloc_r>
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	b950      	cbnz	r0, 8002fd8 <__ssputs_r+0x5c>
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	f8ca 3000 	str.w	r3, [sl]
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	6921      	ldr	r1, [r4, #16]
 8002fda:	464a      	mov	r2, r9
 8002fdc:	f000 fabe 	bl	800355c <memcpy>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	6126      	str	r6, [r4, #16]
 8002fee:	6165      	str	r5, [r4, #20]
 8002ff0:	444e      	add	r6, r9
 8002ff2:	eba5 0509 	sub.w	r5, r5, r9
 8002ff6:	6026      	str	r6, [r4, #0]
 8002ff8:	60a5      	str	r5, [r4, #8]
 8002ffa:	463e      	mov	r6, r7
 8002ffc:	42be      	cmp	r6, r7
 8002ffe:	d900      	bls.n	8003002 <__ssputs_r+0x86>
 8003000:	463e      	mov	r6, r7
 8003002:	4632      	mov	r2, r6
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	4641      	mov	r1, r8
 8003008:	f000 fab6 	bl	8003578 <memmove>
 800300c:	68a3      	ldr	r3, [r4, #8]
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	1b9b      	subs	r3, r3, r6
 8003012:	4432      	add	r2, r6
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	2000      	movs	r0, #0
 800301a:	e7db      	b.n	8002fd4 <__ssputs_r+0x58>
 800301c:	462a      	mov	r2, r5
 800301e:	f000 fb6f 	bl	8003700 <_realloc_r>
 8003022:	4606      	mov	r6, r0
 8003024:	2800      	cmp	r0, #0
 8003026:	d1e1      	bne.n	8002fec <__ssputs_r+0x70>
 8003028:	6921      	ldr	r1, [r4, #16]
 800302a:	4650      	mov	r0, sl
 800302c:	f000 fabe 	bl	80035ac <_free_r>
 8003030:	e7c7      	b.n	8002fc2 <__ssputs_r+0x46>
	...

08003034 <_svfiprintf_r>:
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003038:	4698      	mov	r8, r3
 800303a:	898b      	ldrh	r3, [r1, #12]
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	b09d      	sub	sp, #116	; 0x74
 8003040:	4607      	mov	r7, r0
 8003042:	460d      	mov	r5, r1
 8003044:	4614      	mov	r4, r2
 8003046:	d50e      	bpl.n	8003066 <_svfiprintf_r+0x32>
 8003048:	690b      	ldr	r3, [r1, #16]
 800304a:	b963      	cbnz	r3, 8003066 <_svfiprintf_r+0x32>
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	f000 fafd 	bl	800364c <_malloc_r>
 8003052:	6028      	str	r0, [r5, #0]
 8003054:	6128      	str	r0, [r5, #16]
 8003056:	b920      	cbnz	r0, 8003062 <_svfiprintf_r+0x2e>
 8003058:	230c      	movs	r3, #12
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	e0d1      	b.n	8003206 <_svfiprintf_r+0x1d2>
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	616b      	str	r3, [r5, #20]
 8003066:	2300      	movs	r3, #0
 8003068:	9309      	str	r3, [sp, #36]	; 0x24
 800306a:	2320      	movs	r3, #32
 800306c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003070:	f8cd 800c 	str.w	r8, [sp, #12]
 8003074:	2330      	movs	r3, #48	; 0x30
 8003076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003220 <_svfiprintf_r+0x1ec>
 800307a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800307e:	f04f 0901 	mov.w	r9, #1
 8003082:	4623      	mov	r3, r4
 8003084:	469a      	mov	sl, r3
 8003086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800308a:	b10a      	cbz	r2, 8003090 <_svfiprintf_r+0x5c>
 800308c:	2a25      	cmp	r2, #37	; 0x25
 800308e:	d1f9      	bne.n	8003084 <_svfiprintf_r+0x50>
 8003090:	ebba 0b04 	subs.w	fp, sl, r4
 8003094:	d00b      	beq.n	80030ae <_svfiprintf_r+0x7a>
 8003096:	465b      	mov	r3, fp
 8003098:	4622      	mov	r2, r4
 800309a:	4629      	mov	r1, r5
 800309c:	4638      	mov	r0, r7
 800309e:	f7ff ff6d 	bl	8002f7c <__ssputs_r>
 80030a2:	3001      	adds	r0, #1
 80030a4:	f000 80aa 	beq.w	80031fc <_svfiprintf_r+0x1c8>
 80030a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030aa:	445a      	add	r2, fp
 80030ac:	9209      	str	r2, [sp, #36]	; 0x24
 80030ae:	f89a 3000 	ldrb.w	r3, [sl]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a2 	beq.w	80031fc <_svfiprintf_r+0x1c8>
 80030b8:	2300      	movs	r3, #0
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
 80030be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030c2:	f10a 0a01 	add.w	sl, sl, #1
 80030c6:	9304      	str	r3, [sp, #16]
 80030c8:	9307      	str	r3, [sp, #28]
 80030ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030ce:	931a      	str	r3, [sp, #104]	; 0x68
 80030d0:	4654      	mov	r4, sl
 80030d2:	2205      	movs	r2, #5
 80030d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d8:	4851      	ldr	r0, [pc, #324]	; (8003220 <_svfiprintf_r+0x1ec>)
 80030da:	f7fd f881 	bl	80001e0 <memchr>
 80030de:	9a04      	ldr	r2, [sp, #16]
 80030e0:	b9d8      	cbnz	r0, 800311a <_svfiprintf_r+0xe6>
 80030e2:	06d0      	lsls	r0, r2, #27
 80030e4:	bf44      	itt	mi
 80030e6:	2320      	movmi	r3, #32
 80030e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ec:	0711      	lsls	r1, r2, #28
 80030ee:	bf44      	itt	mi
 80030f0:	232b      	movmi	r3, #43	; 0x2b
 80030f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f6:	f89a 3000 	ldrb.w	r3, [sl]
 80030fa:	2b2a      	cmp	r3, #42	; 0x2a
 80030fc:	d015      	beq.n	800312a <_svfiprintf_r+0xf6>
 80030fe:	9a07      	ldr	r2, [sp, #28]
 8003100:	4654      	mov	r4, sl
 8003102:	2000      	movs	r0, #0
 8003104:	f04f 0c0a 	mov.w	ip, #10
 8003108:	4621      	mov	r1, r4
 800310a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800310e:	3b30      	subs	r3, #48	; 0x30
 8003110:	2b09      	cmp	r3, #9
 8003112:	d94e      	bls.n	80031b2 <_svfiprintf_r+0x17e>
 8003114:	b1b0      	cbz	r0, 8003144 <_svfiprintf_r+0x110>
 8003116:	9207      	str	r2, [sp, #28]
 8003118:	e014      	b.n	8003144 <_svfiprintf_r+0x110>
 800311a:	eba0 0308 	sub.w	r3, r0, r8
 800311e:	fa09 f303 	lsl.w	r3, r9, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	46a2      	mov	sl, r4
 8003128:	e7d2      	b.n	80030d0 <_svfiprintf_r+0x9c>
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	1d19      	adds	r1, r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	9103      	str	r1, [sp, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	bfbb      	ittet	lt
 8003136:	425b      	neglt	r3, r3
 8003138:	f042 0202 	orrlt.w	r2, r2, #2
 800313c:	9307      	strge	r3, [sp, #28]
 800313e:	9307      	strlt	r3, [sp, #28]
 8003140:	bfb8      	it	lt
 8003142:	9204      	strlt	r2, [sp, #16]
 8003144:	7823      	ldrb	r3, [r4, #0]
 8003146:	2b2e      	cmp	r3, #46	; 0x2e
 8003148:	d10c      	bne.n	8003164 <_svfiprintf_r+0x130>
 800314a:	7863      	ldrb	r3, [r4, #1]
 800314c:	2b2a      	cmp	r3, #42	; 0x2a
 800314e:	d135      	bne.n	80031bc <_svfiprintf_r+0x188>
 8003150:	9b03      	ldr	r3, [sp, #12]
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	9203      	str	r2, [sp, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	bfb8      	it	lt
 800315c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003160:	3402      	adds	r4, #2
 8003162:	9305      	str	r3, [sp, #20]
 8003164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003230 <_svfiprintf_r+0x1fc>
 8003168:	7821      	ldrb	r1, [r4, #0]
 800316a:	2203      	movs	r2, #3
 800316c:	4650      	mov	r0, sl
 800316e:	f7fd f837 	bl	80001e0 <memchr>
 8003172:	b140      	cbz	r0, 8003186 <_svfiprintf_r+0x152>
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	eba0 000a 	sub.w	r0, r0, sl
 800317a:	fa03 f000 	lsl.w	r0, r3, r0
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	4303      	orrs	r3, r0
 8003182:	3401      	adds	r4, #1
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800318a:	4826      	ldr	r0, [pc, #152]	; (8003224 <_svfiprintf_r+0x1f0>)
 800318c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003190:	2206      	movs	r2, #6
 8003192:	f7fd f825 	bl	80001e0 <memchr>
 8003196:	2800      	cmp	r0, #0
 8003198:	d038      	beq.n	800320c <_svfiprintf_r+0x1d8>
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <_svfiprintf_r+0x1f4>)
 800319c:	bb1b      	cbnz	r3, 80031e6 <_svfiprintf_r+0x1b2>
 800319e:	9b03      	ldr	r3, [sp, #12]
 80031a0:	3307      	adds	r3, #7
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	3308      	adds	r3, #8
 80031a8:	9303      	str	r3, [sp, #12]
 80031aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ac:	4433      	add	r3, r6
 80031ae:	9309      	str	r3, [sp, #36]	; 0x24
 80031b0:	e767      	b.n	8003082 <_svfiprintf_r+0x4e>
 80031b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80031b6:	460c      	mov	r4, r1
 80031b8:	2001      	movs	r0, #1
 80031ba:	e7a5      	b.n	8003108 <_svfiprintf_r+0xd4>
 80031bc:	2300      	movs	r3, #0
 80031be:	3401      	adds	r4, #1
 80031c0:	9305      	str	r3, [sp, #20]
 80031c2:	4619      	mov	r1, r3
 80031c4:	f04f 0c0a 	mov.w	ip, #10
 80031c8:	4620      	mov	r0, r4
 80031ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ce:	3a30      	subs	r2, #48	; 0x30
 80031d0:	2a09      	cmp	r2, #9
 80031d2:	d903      	bls.n	80031dc <_svfiprintf_r+0x1a8>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0c5      	beq.n	8003164 <_svfiprintf_r+0x130>
 80031d8:	9105      	str	r1, [sp, #20]
 80031da:	e7c3      	b.n	8003164 <_svfiprintf_r+0x130>
 80031dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80031e0:	4604      	mov	r4, r0
 80031e2:	2301      	movs	r3, #1
 80031e4:	e7f0      	b.n	80031c8 <_svfiprintf_r+0x194>
 80031e6:	ab03      	add	r3, sp, #12
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	462a      	mov	r2, r5
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <_svfiprintf_r+0x1f8>)
 80031ee:	a904      	add	r1, sp, #16
 80031f0:	4638      	mov	r0, r7
 80031f2:	f3af 8000 	nop.w
 80031f6:	1c42      	adds	r2, r0, #1
 80031f8:	4606      	mov	r6, r0
 80031fa:	d1d6      	bne.n	80031aa <_svfiprintf_r+0x176>
 80031fc:	89ab      	ldrh	r3, [r5, #12]
 80031fe:	065b      	lsls	r3, r3, #25
 8003200:	f53f af2c 	bmi.w	800305c <_svfiprintf_r+0x28>
 8003204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003206:	b01d      	add	sp, #116	; 0x74
 8003208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320c:	ab03      	add	r3, sp, #12
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	462a      	mov	r2, r5
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <_svfiprintf_r+0x1f8>)
 8003214:	a904      	add	r1, sp, #16
 8003216:	4638      	mov	r0, r7
 8003218:	f000 f87a 	bl	8003310 <_printf_i>
 800321c:	e7eb      	b.n	80031f6 <_svfiprintf_r+0x1c2>
 800321e:	bf00      	nop
 8003220:	0800385c 	.word	0x0800385c
 8003224:	08003866 	.word	0x08003866
 8003228:	00000000 	.word	0x00000000
 800322c:	08002f7d 	.word	0x08002f7d
 8003230:	08003862 	.word	0x08003862

08003234 <_printf_common>:
 8003234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003238:	4616      	mov	r6, r2
 800323a:	4699      	mov	r9, r3
 800323c:	688a      	ldr	r2, [r1, #8]
 800323e:	690b      	ldr	r3, [r1, #16]
 8003240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003244:	4293      	cmp	r3, r2
 8003246:	bfb8      	it	lt
 8003248:	4613      	movlt	r3, r2
 800324a:	6033      	str	r3, [r6, #0]
 800324c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003250:	4607      	mov	r7, r0
 8003252:	460c      	mov	r4, r1
 8003254:	b10a      	cbz	r2, 800325a <_printf_common+0x26>
 8003256:	3301      	adds	r3, #1
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	0699      	lsls	r1, r3, #26
 800325e:	bf42      	ittt	mi
 8003260:	6833      	ldrmi	r3, [r6, #0]
 8003262:	3302      	addmi	r3, #2
 8003264:	6033      	strmi	r3, [r6, #0]
 8003266:	6825      	ldr	r5, [r4, #0]
 8003268:	f015 0506 	ands.w	r5, r5, #6
 800326c:	d106      	bne.n	800327c <_printf_common+0x48>
 800326e:	f104 0a19 	add.w	sl, r4, #25
 8003272:	68e3      	ldr	r3, [r4, #12]
 8003274:	6832      	ldr	r2, [r6, #0]
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	42ab      	cmp	r3, r5
 800327a:	dc26      	bgt.n	80032ca <_printf_common+0x96>
 800327c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003280:	1e13      	subs	r3, r2, #0
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	bf18      	it	ne
 8003286:	2301      	movne	r3, #1
 8003288:	0692      	lsls	r2, r2, #26
 800328a:	d42b      	bmi.n	80032e4 <_printf_common+0xb0>
 800328c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003290:	4649      	mov	r1, r9
 8003292:	4638      	mov	r0, r7
 8003294:	47c0      	blx	r8
 8003296:	3001      	adds	r0, #1
 8003298:	d01e      	beq.n	80032d8 <_printf_common+0xa4>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	68e5      	ldr	r5, [r4, #12]
 800329e:	6832      	ldr	r2, [r6, #0]
 80032a0:	f003 0306 	and.w	r3, r3, #6
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	bf08      	it	eq
 80032a8:	1aad      	subeq	r5, r5, r2
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	6922      	ldr	r2, [r4, #16]
 80032ae:	bf0c      	ite	eq
 80032b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b4:	2500      	movne	r5, #0
 80032b6:	4293      	cmp	r3, r2
 80032b8:	bfc4      	itt	gt
 80032ba:	1a9b      	subgt	r3, r3, r2
 80032bc:	18ed      	addgt	r5, r5, r3
 80032be:	2600      	movs	r6, #0
 80032c0:	341a      	adds	r4, #26
 80032c2:	42b5      	cmp	r5, r6
 80032c4:	d11a      	bne.n	80032fc <_printf_common+0xc8>
 80032c6:	2000      	movs	r0, #0
 80032c8:	e008      	b.n	80032dc <_printf_common+0xa8>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4652      	mov	r2, sl
 80032ce:	4649      	mov	r1, r9
 80032d0:	4638      	mov	r0, r7
 80032d2:	47c0      	blx	r8
 80032d4:	3001      	adds	r0, #1
 80032d6:	d103      	bne.n	80032e0 <_printf_common+0xac>
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7c6      	b.n	8003272 <_printf_common+0x3e>
 80032e4:	18e1      	adds	r1, r4, r3
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	2030      	movs	r0, #48	; 0x30
 80032ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ee:	4422      	add	r2, r4
 80032f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032f8:	3302      	adds	r3, #2
 80032fa:	e7c7      	b.n	800328c <_printf_common+0x58>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4622      	mov	r2, r4
 8003300:	4649      	mov	r1, r9
 8003302:	4638      	mov	r0, r7
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d0e6      	beq.n	80032d8 <_printf_common+0xa4>
 800330a:	3601      	adds	r6, #1
 800330c:	e7d9      	b.n	80032c2 <_printf_common+0x8e>
	...

08003310 <_printf_i>:
 8003310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003314:	460c      	mov	r4, r1
 8003316:	4691      	mov	r9, r2
 8003318:	7e27      	ldrb	r7, [r4, #24]
 800331a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800331c:	2f78      	cmp	r7, #120	; 0x78
 800331e:	4680      	mov	r8, r0
 8003320:	469a      	mov	sl, r3
 8003322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003326:	d807      	bhi.n	8003338 <_printf_i+0x28>
 8003328:	2f62      	cmp	r7, #98	; 0x62
 800332a:	d80a      	bhi.n	8003342 <_printf_i+0x32>
 800332c:	2f00      	cmp	r7, #0
 800332e:	f000 80d8 	beq.w	80034e2 <_printf_i+0x1d2>
 8003332:	2f58      	cmp	r7, #88	; 0x58
 8003334:	f000 80a3 	beq.w	800347e <_printf_i+0x16e>
 8003338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800333c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003340:	e03a      	b.n	80033b8 <_printf_i+0xa8>
 8003342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003346:	2b15      	cmp	r3, #21
 8003348:	d8f6      	bhi.n	8003338 <_printf_i+0x28>
 800334a:	a001      	add	r0, pc, #4	; (adr r0, 8003350 <_printf_i+0x40>)
 800334c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003350:	080033a9 	.word	0x080033a9
 8003354:	080033bd 	.word	0x080033bd
 8003358:	08003339 	.word	0x08003339
 800335c:	08003339 	.word	0x08003339
 8003360:	08003339 	.word	0x08003339
 8003364:	08003339 	.word	0x08003339
 8003368:	080033bd 	.word	0x080033bd
 800336c:	08003339 	.word	0x08003339
 8003370:	08003339 	.word	0x08003339
 8003374:	08003339 	.word	0x08003339
 8003378:	08003339 	.word	0x08003339
 800337c:	080034c9 	.word	0x080034c9
 8003380:	080033ed 	.word	0x080033ed
 8003384:	080034ab 	.word	0x080034ab
 8003388:	08003339 	.word	0x08003339
 800338c:	08003339 	.word	0x08003339
 8003390:	080034eb 	.word	0x080034eb
 8003394:	08003339 	.word	0x08003339
 8003398:	080033ed 	.word	0x080033ed
 800339c:	08003339 	.word	0x08003339
 80033a0:	08003339 	.word	0x08003339
 80033a4:	080034b3 	.word	0x080034b3
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	1d1a      	adds	r2, r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	600a      	str	r2, [r1, #0]
 80033b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0a3      	b.n	8003504 <_printf_i+0x1f4>
 80033bc:	6825      	ldr	r5, [r4, #0]
 80033be:	6808      	ldr	r0, [r1, #0]
 80033c0:	062e      	lsls	r6, r5, #24
 80033c2:	f100 0304 	add.w	r3, r0, #4
 80033c6:	d50a      	bpl.n	80033de <_printf_i+0xce>
 80033c8:	6805      	ldr	r5, [r0, #0]
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	da03      	bge.n	80033d8 <_printf_i+0xc8>
 80033d0:	232d      	movs	r3, #45	; 0x2d
 80033d2:	426d      	negs	r5, r5
 80033d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d8:	485e      	ldr	r0, [pc, #376]	; (8003554 <_printf_i+0x244>)
 80033da:	230a      	movs	r3, #10
 80033dc:	e019      	b.n	8003412 <_printf_i+0x102>
 80033de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033e2:	6805      	ldr	r5, [r0, #0]
 80033e4:	600b      	str	r3, [r1, #0]
 80033e6:	bf18      	it	ne
 80033e8:	b22d      	sxthne	r5, r5
 80033ea:	e7ef      	b.n	80033cc <_printf_i+0xbc>
 80033ec:	680b      	ldr	r3, [r1, #0]
 80033ee:	6825      	ldr	r5, [r4, #0]
 80033f0:	1d18      	adds	r0, r3, #4
 80033f2:	6008      	str	r0, [r1, #0]
 80033f4:	0628      	lsls	r0, r5, #24
 80033f6:	d501      	bpl.n	80033fc <_printf_i+0xec>
 80033f8:	681d      	ldr	r5, [r3, #0]
 80033fa:	e002      	b.n	8003402 <_printf_i+0xf2>
 80033fc:	0669      	lsls	r1, r5, #25
 80033fe:	d5fb      	bpl.n	80033f8 <_printf_i+0xe8>
 8003400:	881d      	ldrh	r5, [r3, #0]
 8003402:	4854      	ldr	r0, [pc, #336]	; (8003554 <_printf_i+0x244>)
 8003404:	2f6f      	cmp	r7, #111	; 0x6f
 8003406:	bf0c      	ite	eq
 8003408:	2308      	moveq	r3, #8
 800340a:	230a      	movne	r3, #10
 800340c:	2100      	movs	r1, #0
 800340e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003412:	6866      	ldr	r6, [r4, #4]
 8003414:	60a6      	str	r6, [r4, #8]
 8003416:	2e00      	cmp	r6, #0
 8003418:	bfa2      	ittt	ge
 800341a:	6821      	ldrge	r1, [r4, #0]
 800341c:	f021 0104 	bicge.w	r1, r1, #4
 8003420:	6021      	strge	r1, [r4, #0]
 8003422:	b90d      	cbnz	r5, 8003428 <_printf_i+0x118>
 8003424:	2e00      	cmp	r6, #0
 8003426:	d04d      	beq.n	80034c4 <_printf_i+0x1b4>
 8003428:	4616      	mov	r6, r2
 800342a:	fbb5 f1f3 	udiv	r1, r5, r3
 800342e:	fb03 5711 	mls	r7, r3, r1, r5
 8003432:	5dc7      	ldrb	r7, [r0, r7]
 8003434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003438:	462f      	mov	r7, r5
 800343a:	42bb      	cmp	r3, r7
 800343c:	460d      	mov	r5, r1
 800343e:	d9f4      	bls.n	800342a <_printf_i+0x11a>
 8003440:	2b08      	cmp	r3, #8
 8003442:	d10b      	bne.n	800345c <_printf_i+0x14c>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	07df      	lsls	r7, r3, #31
 8003448:	d508      	bpl.n	800345c <_printf_i+0x14c>
 800344a:	6923      	ldr	r3, [r4, #16]
 800344c:	6861      	ldr	r1, [r4, #4]
 800344e:	4299      	cmp	r1, r3
 8003450:	bfde      	ittt	le
 8003452:	2330      	movle	r3, #48	; 0x30
 8003454:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003458:	f106 36ff 	addle.w	r6, r6, #4294967295
 800345c:	1b92      	subs	r2, r2, r6
 800345e:	6122      	str	r2, [r4, #16]
 8003460:	f8cd a000 	str.w	sl, [sp]
 8003464:	464b      	mov	r3, r9
 8003466:	aa03      	add	r2, sp, #12
 8003468:	4621      	mov	r1, r4
 800346a:	4640      	mov	r0, r8
 800346c:	f7ff fee2 	bl	8003234 <_printf_common>
 8003470:	3001      	adds	r0, #1
 8003472:	d14c      	bne.n	800350e <_printf_i+0x1fe>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	b004      	add	sp, #16
 800347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347e:	4835      	ldr	r0, [pc, #212]	; (8003554 <_printf_i+0x244>)
 8003480:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	680e      	ldr	r6, [r1, #0]
 8003488:	061f      	lsls	r7, r3, #24
 800348a:	f856 5b04 	ldr.w	r5, [r6], #4
 800348e:	600e      	str	r6, [r1, #0]
 8003490:	d514      	bpl.n	80034bc <_printf_i+0x1ac>
 8003492:	07d9      	lsls	r1, r3, #31
 8003494:	bf44      	itt	mi
 8003496:	f043 0320 	orrmi.w	r3, r3, #32
 800349a:	6023      	strmi	r3, [r4, #0]
 800349c:	b91d      	cbnz	r5, 80034a6 <_printf_i+0x196>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f023 0320 	bic.w	r3, r3, #32
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	2310      	movs	r3, #16
 80034a8:	e7b0      	b.n	800340c <_printf_i+0xfc>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	f043 0320 	orr.w	r3, r3, #32
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	2378      	movs	r3, #120	; 0x78
 80034b4:	4828      	ldr	r0, [pc, #160]	; (8003558 <_printf_i+0x248>)
 80034b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ba:	e7e3      	b.n	8003484 <_printf_i+0x174>
 80034bc:	065e      	lsls	r6, r3, #25
 80034be:	bf48      	it	mi
 80034c0:	b2ad      	uxthmi	r5, r5
 80034c2:	e7e6      	b.n	8003492 <_printf_i+0x182>
 80034c4:	4616      	mov	r6, r2
 80034c6:	e7bb      	b.n	8003440 <_printf_i+0x130>
 80034c8:	680b      	ldr	r3, [r1, #0]
 80034ca:	6826      	ldr	r6, [r4, #0]
 80034cc:	6960      	ldr	r0, [r4, #20]
 80034ce:	1d1d      	adds	r5, r3, #4
 80034d0:	600d      	str	r5, [r1, #0]
 80034d2:	0635      	lsls	r5, r6, #24
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	d501      	bpl.n	80034dc <_printf_i+0x1cc>
 80034d8:	6018      	str	r0, [r3, #0]
 80034da:	e002      	b.n	80034e2 <_printf_i+0x1d2>
 80034dc:	0671      	lsls	r1, r6, #25
 80034de:	d5fb      	bpl.n	80034d8 <_printf_i+0x1c8>
 80034e0:	8018      	strh	r0, [r3, #0]
 80034e2:	2300      	movs	r3, #0
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	4616      	mov	r6, r2
 80034e8:	e7ba      	b.n	8003460 <_printf_i+0x150>
 80034ea:	680b      	ldr	r3, [r1, #0]
 80034ec:	1d1a      	adds	r2, r3, #4
 80034ee:	600a      	str	r2, [r1, #0]
 80034f0:	681e      	ldr	r6, [r3, #0]
 80034f2:	6862      	ldr	r2, [r4, #4]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7fc fe72 	bl	80001e0 <memchr>
 80034fc:	b108      	cbz	r0, 8003502 <_printf_i+0x1f2>
 80034fe:	1b80      	subs	r0, r0, r6
 8003500:	6060      	str	r0, [r4, #4]
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	6123      	str	r3, [r4, #16]
 8003506:	2300      	movs	r3, #0
 8003508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800350c:	e7a8      	b.n	8003460 <_printf_i+0x150>
 800350e:	6923      	ldr	r3, [r4, #16]
 8003510:	4632      	mov	r2, r6
 8003512:	4649      	mov	r1, r9
 8003514:	4640      	mov	r0, r8
 8003516:	47d0      	blx	sl
 8003518:	3001      	adds	r0, #1
 800351a:	d0ab      	beq.n	8003474 <_printf_i+0x164>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	079b      	lsls	r3, r3, #30
 8003520:	d413      	bmi.n	800354a <_printf_i+0x23a>
 8003522:	68e0      	ldr	r0, [r4, #12]
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	4298      	cmp	r0, r3
 8003528:	bfb8      	it	lt
 800352a:	4618      	movlt	r0, r3
 800352c:	e7a4      	b.n	8003478 <_printf_i+0x168>
 800352e:	2301      	movs	r3, #1
 8003530:	4632      	mov	r2, r6
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	47d0      	blx	sl
 8003538:	3001      	adds	r0, #1
 800353a:	d09b      	beq.n	8003474 <_printf_i+0x164>
 800353c:	3501      	adds	r5, #1
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	9903      	ldr	r1, [sp, #12]
 8003542:	1a5b      	subs	r3, r3, r1
 8003544:	42ab      	cmp	r3, r5
 8003546:	dcf2      	bgt.n	800352e <_printf_i+0x21e>
 8003548:	e7eb      	b.n	8003522 <_printf_i+0x212>
 800354a:	2500      	movs	r5, #0
 800354c:	f104 0619 	add.w	r6, r4, #25
 8003550:	e7f5      	b.n	800353e <_printf_i+0x22e>
 8003552:	bf00      	nop
 8003554:	0800386d 	.word	0x0800386d
 8003558:	0800387e 	.word	0x0800387e

0800355c <memcpy>:
 800355c:	440a      	add	r2, r1
 800355e:	4291      	cmp	r1, r2
 8003560:	f100 33ff 	add.w	r3, r0, #4294967295
 8003564:	d100      	bne.n	8003568 <memcpy+0xc>
 8003566:	4770      	bx	lr
 8003568:	b510      	push	{r4, lr}
 800356a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800356e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003572:	4291      	cmp	r1, r2
 8003574:	d1f9      	bne.n	800356a <memcpy+0xe>
 8003576:	bd10      	pop	{r4, pc}

08003578 <memmove>:
 8003578:	4288      	cmp	r0, r1
 800357a:	b510      	push	{r4, lr}
 800357c:	eb01 0402 	add.w	r4, r1, r2
 8003580:	d902      	bls.n	8003588 <memmove+0x10>
 8003582:	4284      	cmp	r4, r0
 8003584:	4623      	mov	r3, r4
 8003586:	d807      	bhi.n	8003598 <memmove+0x20>
 8003588:	1e43      	subs	r3, r0, #1
 800358a:	42a1      	cmp	r1, r4
 800358c:	d008      	beq.n	80035a0 <memmove+0x28>
 800358e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003596:	e7f8      	b.n	800358a <memmove+0x12>
 8003598:	4402      	add	r2, r0
 800359a:	4601      	mov	r1, r0
 800359c:	428a      	cmp	r2, r1
 800359e:	d100      	bne.n	80035a2 <memmove+0x2a>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035aa:	e7f7      	b.n	800359c <memmove+0x24>

080035ac <_free_r>:
 80035ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035ae:	2900      	cmp	r1, #0
 80035b0:	d048      	beq.n	8003644 <_free_r+0x98>
 80035b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b6:	9001      	str	r0, [sp, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f1a1 0404 	sub.w	r4, r1, #4
 80035be:	bfb8      	it	lt
 80035c0:	18e4      	addlt	r4, r4, r3
 80035c2:	f000 f8d3 	bl	800376c <__malloc_lock>
 80035c6:	4a20      	ldr	r2, [pc, #128]	; (8003648 <_free_r+0x9c>)
 80035c8:	9801      	ldr	r0, [sp, #4]
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	4615      	mov	r5, r2
 80035ce:	b933      	cbnz	r3, 80035de <_free_r+0x32>
 80035d0:	6063      	str	r3, [r4, #4]
 80035d2:	6014      	str	r4, [r2, #0]
 80035d4:	b003      	add	sp, #12
 80035d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035da:	f000 b8cd 	b.w	8003778 <__malloc_unlock>
 80035de:	42a3      	cmp	r3, r4
 80035e0:	d90b      	bls.n	80035fa <_free_r+0x4e>
 80035e2:	6821      	ldr	r1, [r4, #0]
 80035e4:	1862      	adds	r2, r4, r1
 80035e6:	4293      	cmp	r3, r2
 80035e8:	bf04      	itt	eq
 80035ea:	681a      	ldreq	r2, [r3, #0]
 80035ec:	685b      	ldreq	r3, [r3, #4]
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	bf04      	itt	eq
 80035f2:	1852      	addeq	r2, r2, r1
 80035f4:	6022      	streq	r2, [r4, #0]
 80035f6:	602c      	str	r4, [r5, #0]
 80035f8:	e7ec      	b.n	80035d4 <_free_r+0x28>
 80035fa:	461a      	mov	r2, r3
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b10b      	cbz	r3, 8003604 <_free_r+0x58>
 8003600:	42a3      	cmp	r3, r4
 8003602:	d9fa      	bls.n	80035fa <_free_r+0x4e>
 8003604:	6811      	ldr	r1, [r2, #0]
 8003606:	1855      	adds	r5, r2, r1
 8003608:	42a5      	cmp	r5, r4
 800360a:	d10b      	bne.n	8003624 <_free_r+0x78>
 800360c:	6824      	ldr	r4, [r4, #0]
 800360e:	4421      	add	r1, r4
 8003610:	1854      	adds	r4, r2, r1
 8003612:	42a3      	cmp	r3, r4
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	d1dd      	bne.n	80035d4 <_free_r+0x28>
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	6053      	str	r3, [r2, #4]
 800361e:	4421      	add	r1, r4
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	e7d7      	b.n	80035d4 <_free_r+0x28>
 8003624:	d902      	bls.n	800362c <_free_r+0x80>
 8003626:	230c      	movs	r3, #12
 8003628:	6003      	str	r3, [r0, #0]
 800362a:	e7d3      	b.n	80035d4 <_free_r+0x28>
 800362c:	6825      	ldr	r5, [r4, #0]
 800362e:	1961      	adds	r1, r4, r5
 8003630:	428b      	cmp	r3, r1
 8003632:	bf04      	itt	eq
 8003634:	6819      	ldreq	r1, [r3, #0]
 8003636:	685b      	ldreq	r3, [r3, #4]
 8003638:	6063      	str	r3, [r4, #4]
 800363a:	bf04      	itt	eq
 800363c:	1949      	addeq	r1, r1, r5
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	6054      	str	r4, [r2, #4]
 8003642:	e7c7      	b.n	80035d4 <_free_r+0x28>
 8003644:	b003      	add	sp, #12
 8003646:	bd30      	pop	{r4, r5, pc}
 8003648:	20000098 	.word	0x20000098

0800364c <_malloc_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	1ccd      	adds	r5, r1, #3
 8003650:	f025 0503 	bic.w	r5, r5, #3
 8003654:	3508      	adds	r5, #8
 8003656:	2d0c      	cmp	r5, #12
 8003658:	bf38      	it	cc
 800365a:	250c      	movcc	r5, #12
 800365c:	2d00      	cmp	r5, #0
 800365e:	4606      	mov	r6, r0
 8003660:	db01      	blt.n	8003666 <_malloc_r+0x1a>
 8003662:	42a9      	cmp	r1, r5
 8003664:	d903      	bls.n	800366e <_malloc_r+0x22>
 8003666:	230c      	movs	r3, #12
 8003668:	6033      	str	r3, [r6, #0]
 800366a:	2000      	movs	r0, #0
 800366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366e:	f000 f87d 	bl	800376c <__malloc_lock>
 8003672:	4921      	ldr	r1, [pc, #132]	; (80036f8 <_malloc_r+0xac>)
 8003674:	680a      	ldr	r2, [r1, #0]
 8003676:	4614      	mov	r4, r2
 8003678:	b99c      	cbnz	r4, 80036a2 <_malloc_r+0x56>
 800367a:	4f20      	ldr	r7, [pc, #128]	; (80036fc <_malloc_r+0xb0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b923      	cbnz	r3, 800368a <_malloc_r+0x3e>
 8003680:	4621      	mov	r1, r4
 8003682:	4630      	mov	r0, r6
 8003684:	f000 f862 	bl	800374c <_sbrk_r>
 8003688:	6038      	str	r0, [r7, #0]
 800368a:	4629      	mov	r1, r5
 800368c:	4630      	mov	r0, r6
 800368e:	f000 f85d 	bl	800374c <_sbrk_r>
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	d123      	bne.n	80036de <_malloc_r+0x92>
 8003696:	230c      	movs	r3, #12
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f86c 	bl	8003778 <__malloc_unlock>
 80036a0:	e7e3      	b.n	800366a <_malloc_r+0x1e>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	1b5b      	subs	r3, r3, r5
 80036a6:	d417      	bmi.n	80036d8 <_malloc_r+0x8c>
 80036a8:	2b0b      	cmp	r3, #11
 80036aa:	d903      	bls.n	80036b4 <_malloc_r+0x68>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	441c      	add	r4, r3
 80036b0:	6025      	str	r5, [r4, #0]
 80036b2:	e004      	b.n	80036be <_malloc_r+0x72>
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	42a2      	cmp	r2, r4
 80036b8:	bf0c      	ite	eq
 80036ba:	600b      	streq	r3, [r1, #0]
 80036bc:	6053      	strne	r3, [r2, #4]
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 f85a 	bl	8003778 <__malloc_unlock>
 80036c4:	f104 000b 	add.w	r0, r4, #11
 80036c8:	1d23      	adds	r3, r4, #4
 80036ca:	f020 0007 	bic.w	r0, r0, #7
 80036ce:	1ac2      	subs	r2, r0, r3
 80036d0:	d0cc      	beq.n	800366c <_malloc_r+0x20>
 80036d2:	1a1b      	subs	r3, r3, r0
 80036d4:	50a3      	str	r3, [r4, r2]
 80036d6:	e7c9      	b.n	800366c <_malloc_r+0x20>
 80036d8:	4622      	mov	r2, r4
 80036da:	6864      	ldr	r4, [r4, #4]
 80036dc:	e7cc      	b.n	8003678 <_malloc_r+0x2c>
 80036de:	1cc4      	adds	r4, r0, #3
 80036e0:	f024 0403 	bic.w	r4, r4, #3
 80036e4:	42a0      	cmp	r0, r4
 80036e6:	d0e3      	beq.n	80036b0 <_malloc_r+0x64>
 80036e8:	1a21      	subs	r1, r4, r0
 80036ea:	4630      	mov	r0, r6
 80036ec:	f000 f82e 	bl	800374c <_sbrk_r>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d1dd      	bne.n	80036b0 <_malloc_r+0x64>
 80036f4:	e7cf      	b.n	8003696 <_malloc_r+0x4a>
 80036f6:	bf00      	nop
 80036f8:	20000098 	.word	0x20000098
 80036fc:	2000009c 	.word	0x2000009c

08003700 <_realloc_r>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4607      	mov	r7, r0
 8003704:	4614      	mov	r4, r2
 8003706:	460e      	mov	r6, r1
 8003708:	b921      	cbnz	r1, 8003714 <_realloc_r+0x14>
 800370a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800370e:	4611      	mov	r1, r2
 8003710:	f7ff bf9c 	b.w	800364c <_malloc_r>
 8003714:	b922      	cbnz	r2, 8003720 <_realloc_r+0x20>
 8003716:	f7ff ff49 	bl	80035ac <_free_r>
 800371a:	4625      	mov	r5, r4
 800371c:	4628      	mov	r0, r5
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003720:	f000 f830 	bl	8003784 <_malloc_usable_size_r>
 8003724:	42a0      	cmp	r0, r4
 8003726:	d20f      	bcs.n	8003748 <_realloc_r+0x48>
 8003728:	4621      	mov	r1, r4
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff ff8e 	bl	800364c <_malloc_r>
 8003730:	4605      	mov	r5, r0
 8003732:	2800      	cmp	r0, #0
 8003734:	d0f2      	beq.n	800371c <_realloc_r+0x1c>
 8003736:	4631      	mov	r1, r6
 8003738:	4622      	mov	r2, r4
 800373a:	f7ff ff0f 	bl	800355c <memcpy>
 800373e:	4631      	mov	r1, r6
 8003740:	4638      	mov	r0, r7
 8003742:	f7ff ff33 	bl	80035ac <_free_r>
 8003746:	e7e9      	b.n	800371c <_realloc_r+0x1c>
 8003748:	4635      	mov	r5, r6
 800374a:	e7e7      	b.n	800371c <_realloc_r+0x1c>

0800374c <_sbrk_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4d06      	ldr	r5, [pc, #24]	; (8003768 <_sbrk_r+0x1c>)
 8003750:	2300      	movs	r3, #0
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f7fd fa82 	bl	8000c60 <_sbrk>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d102      	bne.n	8003766 <_sbrk_r+0x1a>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	b103      	cbz	r3, 8003766 <_sbrk_r+0x1a>
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	20000140 	.word	0x20000140

0800376c <__malloc_lock>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__malloc_lock+0x8>)
 800376e:	f000 b811 	b.w	8003794 <__retarget_lock_acquire_recursive>
 8003772:	bf00      	nop
 8003774:	20000148 	.word	0x20000148

08003778 <__malloc_unlock>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__malloc_unlock+0x8>)
 800377a:	f000 b80c 	b.w	8003796 <__retarget_lock_release_recursive>
 800377e:	bf00      	nop
 8003780:	20000148 	.word	0x20000148

08003784 <_malloc_usable_size_r>:
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f18      	subs	r0, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfbc      	itt	lt
 800378e:	580b      	ldrlt	r3, [r1, r0]
 8003790:	18c0      	addlt	r0, r0, r3
 8003792:	4770      	bx	lr

08003794 <__retarget_lock_acquire_recursive>:
 8003794:	4770      	bx	lr

08003796 <__retarget_lock_release_recursive>:
 8003796:	4770      	bx	lr

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
